<div x-cloak x-data="collections" class="">
  <div class="flex flex-col justify-center items-center h-screen w-screen">

    <div class="grid grid-cols-4">
      <div x-show="isGroupComplete(1)" x-text="textContentForGroup(1)" data-group="1" class="bg-groupingOne col-span-4 flex justify-center items-center text-2xl font-semibold h-20 capitalize rounded-lg p-4 m-2" style="min-width: 675px"></div>
      <div x-show="isGroupComplete(2)" x-text="textContentForGroup(2)" data-group="2" class="bg-groupingTwo col-span-4 flex justify-center items-center text-2xl font-semibold h-20 capitalize rounded-lg p-4 m-2" style="min-width: 675px"></div>
      <div x-show="isGroupComplete(3)" x-text="textContentForGroup(3)" data-group="3" class="bg-groupingThree col-span-4 flex justify-center items-center text-2xl font-semibold h-20 capitalize rounded-lg p-4 m-2" style="min-width: 675px"></div>
      <div x-show="isGroupComplete(4)" x-text="textContentForGroup(4)" data-group="4" class="bg-groupingFour col-span-4 flex justify-center items-center text-2xl font-semibold h-20 capitalize rounded-lg p-4 m-2" style="min-width: 675px"></div>

      <% JSON.parse(@collections)['all_words'].shuffle.each do |word| %>
        <a @click="makeSelection" :class="selections.includes('<%= word %>') ? 'bg-red-300' : 'bg-gray-300'" class="cursor-pointer text-2xl select-none p-4 m-2 w-40 h-20 rounded-lg flex justify-center items-center hover:opacity-50" data-word="<%= word %>">
          <%= word %>
        </a>
      <% end %>
    </div>
    <div class="flex justify-center my-6">
      <button x-show="selections.length == 4" @click="deselectAll" id='deselectAll' class="btn danger post-game-button">Deselect
        All
      </button>
      <button x-show="completeGroups.length == 4" @click="location.reload()" class="btn secondary post-game-button">Play
        Again
      </button>
    </div>
  </div>
</div>

<style>
    a {
        -webkit-transition: all 0.5s ease;
        -moz-transition: all 0.5s ease;
        -o-transition: all 0.5s ease;
        transition: all 0.5s ease;
    }

    .post-game-button {
        /*opacity: 0;*/
    }
</style>

<script type="text/javascript" charset="utf-8">
    document.addEventListener('alpine:init', () => {
        Alpine.data('collections', () => ({
            wordsData: <%= @collections.html_safe %>,
            init() {
                console.log('wordsData', this.wordsData)
            },
            selections: [],
            connections: [],
            completeGroups: [],
            makeSelection(e) {
                if (this.selections.includes(e.target.innerText)) {
                    this.selections = this.selections.filter((word) => word !== e.target.innerText)
                } else {
                    this.selections.push(e.target.innerText)
                }
                if (this.selections.length === 4) {
                    let correct = this.checkAnswers()
                    if (correct) {
                        this.connections.push(this.selections)
                        this.selections = []
                        if (this.completeGroups.length === 4) this.gameOver()
                    } else {
                        document.getElementById('deselectAll').style.opacity = '1'
                    }
                }
            },
            checkAnswers() {
                let correct = this.wordsData.groupings.find((grouping) => {
                    return grouping.words.every((word) => this.selections.includes(word))
                })
                if (correct) {
                    document.querySelectorAll('[data-word]').forEach((word) => {
                        if (this.selections.includes(word.dataset.word)) {
                            word.remove()
                        } else if (this.selections.includes(word.dataset.word)) {
                            return word.classList.add('bg-red-600')
                        }
                    })
                    this.completeGroups.push(correct.difficulty)
                } else {
                    console.log('incorrect')
                    return false
                }
                return correct;
            },
            deselectAll(e) {
                this.selections = []
                document.querySelectorAll('[data-word]').forEach((word) => {
                    word.classList.remove('bg-red-300')
                    word.classList.add('bg-gray-300')
                })
                e.target.style.display = 'none'
            },
            textContentForGroup(group) {
                let groupData = this.wordsData.groupings.find((grouping) => grouping.difficulty == group)
                return groupData.commonality.toUpperCase()
            },
            isGroupComplete(group) {
                return this.completeGroups.includes(group)
            },
            gameOver() {
                document.querySelectorAll('.post-game-button').forEach((button) => {
                    button.style.display = 'inline-block'
                })
            }
        }))
    })
</script>